import { Component, Injector, OnInit } from '@angular/core';
import { ActivatedRoute, Router, ParamMap } from '@angular/router';
import { switchMap, take } from 'rxjs/operators';

import { PAYMENT_STATUS } from '../../constants/payment-status.constant';
import { NCCAPIService } from '../../API/NCCAPI/ncc-api.service';
import { NotifyAPIService } from '../../API/NotifyAPI/notify-api.service';
import { CallService } from '../../services/call.service';
import { UHTriggerService } from '../../services/uhtrigger.service';
import { IParisResponse } from '../../interfaces/paris-response';
import { IPaymentInteraction } from '../../interfaces/payment-interaction';
import { PageCommunications } from '../abstract/communications';

@Component({
    selector: 'app-transaction',
    templateUrl: './transaction.component.html',
    styleUrls: ['./transaction.component.scss']
})
export class PageTransactionComponent extends PageCommunications implements OnInit {

    data: IParisResponse;

    NCCAPI: NCCAPIService;

    constructor(private injector: Injector) {
        // see https://stackoverflow.com/a/48723478/4073160
        // This had to be done in order to extend the communications abstract class, but be able to add
        // a reference to the NCC API.
        super(injector);
        this.NCCAPI = this.injector.get(NCCAPIService);
    }

    /**
     *
     */
    ngOnInit() {
        super.ngOnInit();
        this.getData();
    }

    /**
     *
     */
    getData() {
        this.route.paramMap
            .subscribe((params) => {
                // Data will be sent to this page in the form of a custom string. The string is generated by a payment.html page, which
                // receives the query string from Paris.
                // We had to do this because Angular routes don't like ampersands (&) or the equals sign in route parameters.
                this.data = this._processData(params.get('data'));
                this.getPaymentInteraction();

                if (this.wasSuccessful()) {
                    // Record a note about the payment having been made.
                    this.UHTrigger.madePayment(this.data.amount, this.data.receiptnumber);
                }
            });
    }

    /**
     *
     */
    getPaymentInteraction() {
        this.NCCAPI.getPaymentInteractions(
            this.data.interactionId,
            this.data.username,
            this.data.receiptnumber,
            this.wasSuccessful() ? PAYMENT_STATUS.SUCCESSFUL : PAYMENT_STATUS.FAILED
        )
            .pipe(take(1))
            .subscribe((data: IPaymentInteraction) => {

                // data.InteractionData contains some information about the caller.
                // data.PaymentRecorded contains the outcome of recording the payment.
                // data.UserData contains the agent that dealt with the transaction.
            });
    }

    /**
     * Interpret the data passed to this page from Paris.
     */
    private _processData(query: string): IParisResponse {
        // https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore#_frompairs
        const fromPairs = function(arr) {
            return arr.reduce(function(accumulator, value) {
                accumulator[value[0]] = decodeURIComponent(value[1]);
                return accumulator;
            }, {});
        };

        const data = query.split('$').map((row) => {
            const parts = row.split(':');
            return [parts.shift(), parts.join(':')]; // for the benefit of timestamps.
        });
        return fromPairs(data);
    }

    /**
     * Returns TRUE if the payment had been processed successfully.
     */
    wasSuccessful(): boolean {
        return 'true' === this.data.serviceprocessed;
        // 'false' evaluates to true.
    }

    /**
     *
     */
    updatePreview() {
        super.updatePreview();
        if (this.shouldShowPreview()) {
            this.preview.parameters = {
                amount: this.data.amount,
                date: this.data.date,
                'payment ref': this.data.receiptnumber
            };
            console.log('parameters:', this.preview.parameters);
        }
    }

}
